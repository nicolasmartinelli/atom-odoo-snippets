'.source.python':

# Odoo objects

	'Create New Odoo Object':
		'prefix': 'oo_object'
		'body': """
			class NewModule(models.Model):
				_name = '$1'
				_rec_name = '$2' # optional
				_description = '$3'
				_order = '$4' # optional

				name = fields.Char()
		"""

	'Inherit/Extend Existing Odoo Object':
		'prefix': 'oo_object_inherit'
		'body': """
			class NewModule(models.Model):
				_name = '$1' # optional
				_inherit = '$2'

				name = fields.Char()
		"""

# Odoo fields

	'Integer Field':
		'prefix': 'oo_field_integer'
		'body': 'new_field = fields.Integer(string="$1", )'

	'Float Field':
		'prefix': 'oo_field_float'
		'body': 'new_field = fields.Float(string="$1", )'

	'Char Field':
		'prefix': 'oo_field_char'
		'body': 'new_field = fields.Char(string="$1", )'

	'Text Field':
		'prefix': 'oo_field_text'
		'body': 'new_field = fields.Text(string="$1", )'

	'Many2one Field':
		'prefix': 'oo_field_many2one'
		'body': 'new_field_id = fields.Many2one(comodel_name="$1", string="$2", )'

	'One2many Field':
		'prefix': 'oo_field_one2many'
		'body': 'new_field_ids = fields.One2many(comodel_name="$1", inverse_name="$2", string="$3", )'

	'Many2many Field':
		'prefix': 'oo_field_many2many'
		'body': 'new_field_ids = fields.Many2many(comodel_name="$1", relation="$2", column1="$3", column2="$4", string="$5", )'

	'Boolean Field':
		'prefix': 'oo_field_boolean'
		'body': 'is_new_field = fields.Boolean(string="$1", )'

	'HTML Field':
		'prefix': 'oo_field_html'
		'body': 'new_field = fields.HTML(string="$1", )'

	'Date Field':
		'prefix': 'oo_field_date'
		'body': 'new_field = fields.Date(string="$1", )'

	'DateTime Field':
		'prefix': 'oo_field_datetime'
		'body': 'new_field = fields.Datetime(string="$1", )'

	'Selection Field':
		'prefix': 'oo_field_selection'
		'body': 'state = fields.Selection(string="$1", selection=[(\'$2\', \'$3\'), (\'$4\', \'$5\'), ], )'

	'Binary Field':
		'prefix': 'oo_field_binary'
		'body': 'new_field = fields.Binary(string="$1",  )'

# Call to common Odoo methods

	'Search':
		'prefix': 'oo_search'
		'body': 'self.search([(\'$1\', \'=\', $2), ...], offset=0, limit=None, order=None, count=False)'

	'Name search':
		'prefix': 'oo_search_name'
		'body': 'self.name_search(name=\'$1\', args=None, operator=\'ilike\', limit=100)'

# Creation of common Odoo methods

	'Compute method':
		'prefix': 'oo_method_compute'
		'body': """
			@api.multi
			@api.depends("${10:one_field}"${20:, "${30:other_field}"}$40)
			def _compute_${50:${10:one_field}}(self):
				for s in self:
					$60
			"""

	'Onchange method':
		'prefix': 'oo_onchange_method'
		'body': """
			@api.multi
			@api.onchange("${10:one_field}"${20:, "${30:other_field}"}$40)
			def _onchange_${50:${10:one_field}}(self):
				${60:return {
					"domain": {
						"${10:one_field}": [("$70", "${80:=}", ${90:False})],$100
					},${130:
					"warning": {
						"title": _("${140:The warning title}"),
						"message": _("${150:The waning message}"),
					},}
				}}
			"""

	'Constrains method':
		'prefix': 'oo_constrains_method'
		'body': """
			@api.multi
			@api.constrains("${10:one_field}"${20:, "${30:other_field}"}$40)
			def _check_${50:${10:one_field}}(self):
				${60:if ${70:self.${10:one_field} == $80}:
					raise ValidationError(_("$80"))$90}
			"""

# Complex Odoo fields

	'Compute field':
		'prefix': 'odoo_field_compute'
		'body': """
			${10:Char}(
				"${20:Field string}",
				compute='_compute_${30:field}'${40:,
				inverse='_inverse_${30:field}'}${50:,
				search='_search_${30:field}'}${60:,
				help="$70"}$80)

			@api.multi
			@api.depends('${30:field}')
			def _compute_${30:field}(self):
				for s in self:
					${90:pass}
			${40:
			@api.multi
			def _inverse_${30:field}(self):
				for s in self:
					${100:pass}
			}${50:
			@api.multi
			def _search_${30:field}(self, operator, value):
				${110:if operator == 'like':
					operator = 'ilike'}
				return [('${30:field}', operator, value)]}
			"""
